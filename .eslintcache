[{"D:\\workspace\\covid-status\\src\\index.js":"1","D:\\workspace\\covid-status\\src\\components\\Header.component.js":"2","D:\\workspace\\covid-status\\src\\App.js":"3","D:\\workspace\\covid-status\\src\\api\\covid-api.js":"4","D:\\workspace\\covid-status\\src\\config\\api_config.js":"5","D:\\workspace\\covid-status\\src\\components\\Table.component.js":"6"},{"size":517,"mtime":1614581221994,"results":"7","hashOfConfig":"8"},{"size":821,"mtime":1614586236119,"results":"9","hashOfConfig":"8"},{"size":2085,"mtime":1614588038748,"results":"10","hashOfConfig":"8"},{"size":773,"mtime":1614581697728,"results":"11","hashOfConfig":"8"},{"size":208,"mtime":1614581486933,"results":"12","hashOfConfig":"8"},{"size":4016,"mtime":1614588071494,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2dy7ii",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"D:\\workspace\\covid-status\\src\\index.js",[],"D:\\workspace\\covid-status\\src\\components\\Header.component.js",[],"D:\\workspace\\covid-status\\src\\App.js",["27","28"],"D:\\workspace\\covid-status\\src\\api\\covid-api.js",["29"],"D:\\workspace\\covid-status\\src\\config\\api_config.js",[],"D:\\workspace\\covid-status\\src\\components\\Table.component.js",["30","31","32"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n// const columns = [\r\n//     { id: 'country', label: 'Country', minWidth: 100 },\r\n//     { id: 'totalCases', label: 'Total Cases/million', minWidth: 80 },\r\n//     { id: 'active', label: 'Active /million', minWidth: 80 },\r\n//     { id: 'death', label: 'Death Cases/million', minWidth: 80 },\r\n// ];\r\n\r\nconst useStyles2 = makeStyles({\r\n    table: {\r\n        minWidth: 500,\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 440,\r\n    },\r\n});\r\n\r\nconst TableComponent = (props) => {\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const classes = useStyles2();\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    const columns = props.columns || [];\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, filteredData.length - page * rowsPerPage);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setFilteredData(props.filteredData || []);\r\n    }, [props.filteredData])\r\n\r\n    return (\r\n        <Paper className={classes.root} >\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map((column) => (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    align={column.align}\r\n                                    style={{ minWidth: column.minWidth }}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {filteredData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\r\n                            return (\r\n                                <TableRow key={index} hover role=\"checkbox\" tabIndex={-1}>\r\n                                    {columns.map((column) => {\r\n                                        const value = row[column.id];\r\n                                        return (\r\n                                            <TableCell key={column.id} align={column.align}>\r\n                                                {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                            </TableCell>\r\n                                        );\r\n                                    })}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={filteredData.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper >\r\n    )\r\n}\r\n\r\nexport default TableComponent;",{"ruleId":"33","severity":1,"message":"34","line":38,"column":13,"nodeType":"35","endLine":43,"endColumn":4},{"ruleId":"33","severity":1,"message":"36","line":48,"column":6,"nodeType":"37","endLine":48,"endColumn":19,"suggestions":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":13},{"ruleId":"39","severity":1,"message":"43","line":12,"column":7,"nodeType":"41","messageId":"42","endLine":12,"endColumn":14},{"ruleId":"39","severity":1,"message":"44","line":25,"column":7,"nodeType":"41","messageId":"42","endLine":25,"endColumn":16},{"ruleId":"39","severity":1,"message":"45","line":41,"column":11,"nodeType":"41","messageId":"42","endLine":41,"endColumn":20},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'statistics'. Either include it or remove the dependency array.","ArrayExpression",["46"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'columns' is assigned a value but never used.","'useStyles' is assigned a value but never used.","'emptyRows' is assigned a value but never used.",{"desc":"47","fix":"48"},"Update the dependencies array to be: [countryName, statistics]",{"range":"49","text":"50"},[1560,1573],"[countryName, statistics]"]